# Ozan Cinci
# 2448223


# je -> ZF=1 jumps
# jne -> ZF=0 jumps

# Execution begins at address 0 
.pos 0 
	irmovq Stack, %rsp  	# Set up stack pointer  
    irmovq root, %rdi       # set up rdi
    irmovq k, %rsi          # set up rsi
	call kth_bst		    # Execute kth_bst program
	halt			        # Terminate program 

kth_bst:
    # first check if root is null
    andq %rdi, %rdi
    je Terminate            # jump terminate if root is null

    #  long candidate = kth_bst(root->left, k);
    # initially set registers for recursion
    pushq %rdi              # save root into stack
    pushq %rsi              # save k into stack

    mrmovq 8(%rdi), %rdi    # root = root->left;
    call kth_bst            # rax is now kth_bst(root->left, k)
    rrmovq %rax, %r14       # r14 is candidate

    ## time to restore rdi and rsi!
    popq %rsi
    popq %rdi

    ## check if *k > 0
    mrmovq (%rsi), %r8
    irmovq $0, %r9
    subq %r9, %r8
    jle returnCandidate
    # decrement *k by 1
    irmovq $1, %r9
    mrmovq (%rsi),%r14
    subq %r9, %r14         
    rmmovq %r14, (%rsi)
    # check if *k==0
    andq %r14, %r14
    jne returnRight
    mrmovq (%rdi), %rax     # return root -> data
    ret

returnRight:
    # return kth_bst(root->right, k); /* Do the same for right tree*/
    # set registers for recursion
    mrmovq 16(%rdi), %rdi    # root = root->left;
    call kth_bst
    ret

returnCandidate:
    rrmovq %r14, %rax
    ret

Terminate:
    irmovq $-1, %rax
    ret

.pos 0x200
    root:
        .quad 17
        .quad node6
        .quad node24
    node6:
        .quad 6
        .quad node4
        .quad node11
    node4:
        .quad 4
        .quad node3
        .quad node5
    node3:
        .quad 3
        .quad 0
        .quad 0
    node5:
        .quad 5
        .quad 0 # Remember that 0 is null.
        .quad 0
    node11:
        .quad 11
        .quad node8
        .quad 0
    node8:
        .quad 8
        .quad 0
        .quad 0
    node24:
        .quad 24
        .quad node19
        .quad node40
    node19:
        .quad 19
        .quad 0
        .quad 0
    node40:
        .quad 40
        .quad 0
        .quad node52
    node52:
        .quad 52
        .quad 0
        .quad 0
    k:
    .quad 8

.pos 0x800
    Stack:

##### number
## 3 4 5 6 8 11 17 19 24 40 52
#                     17
#           6                 24
#        4       11      19         40
#      3   5   8                      52
